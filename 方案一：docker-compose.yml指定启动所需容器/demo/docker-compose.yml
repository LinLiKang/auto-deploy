# docker与compose版本对应 参看：https://docs.docker.com/compose/compose-file/compose-file-v3/
version: "3.3"

services: 
  # 服务id/名
  mysql:
    # 容器名
    container_name: mysql
    # 依赖的镜像/使用Dockerfile文件构建镜像后的名字
    image: my-mysql:8.0.22
    # 主机名
    hostname: mysql
    # 配置自动重启容器
    restart: always
    # 使用Dockerfile文件构建镜像
    build: 
      context: .
      dockerfile: Dockerfile-mysql
    # 配置容器连接的网络
    networks:
      marchsoft_biz_net:
        ipv4_address: "172.22.3.1"
    # 端口映射
    ports:
      - "3306:3306"
    # 数据卷挂载
    volumes:
      # 暂时先使用绝对路径，之后考虑是否使用数据卷名称的方式挂载数据卷
      - /root/mysql/conf.d:/etc/mysql/conf.d
      - /root/mysql/logs:/logs
      - /root/mysql/data:/var/lib/mysql
    # 设置环境变量
    environment:
      - MYSQL_ROOT_PASSWORD=root
      - TZ=Asia/Shanghai
    # explicit_defaults_for_timestamp=true 参看：https://www.cnblogs.com/zqifa/p/mysql-3.html
    # lower_case_table_names=1 显示设置mysql大小写不敏感，参看：https://blog.csdn.net/jesseyoung/article/details/40617031
    # max_allowed_packet=128M 配置mysql接受数据包的最大值，默认1024KB，参看：https://www.cnblogs.com/leexboo/p/10546902.html
    # default-authentication-plugin=mysql_native_password 配置mysql的默认加密方式，可以使navicat登录
    # sql-mode 参看：https://www.cnblogs.com/kiko2014551511/p/11527480.html
    # max_connections设置mysql的最大连接数，默认为100，超出100会报错不能连接
    # binlog配置 mysql8.x默认开启 transaction_isolation=REPEATABLE-READ和binlog_format=MIXED解决binlog中文乱码问题，将模式更改为 ROW->MIXED
    # expire_logs_days 指定binlog日志文件保存30天
    command:
      --character-set-server=utf8mb4
      --collation-server=utf8mb4_general_ci
      --explicit_defaults_for_timestamp=true
      --lower_case_table_names=1
      --max_allowed_packet=128M
      --default-authentication-plugin=mysql_native_password 
      --sql-mode=NO_AUTO_VALUE_ON_ZERO,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION,PIPES_AS_CONCAT,ANSI_QUOTES
      --max_connections=3600
      --transaction_isolation=REPEATABLE-READ
      --binlog_format=MIXED
      --expire_logs_days=30
    # 从文件中配置环境变量，与environment的作用类似
    #env_file: ./mysql/mysql.env

  # 缓存 --------------------------------------------------------------  
  redis:
    container_name: redis
    image: redis:6.0.10
    hostname: redis
    restart: always
    networks:
      marchsoft_biz_net:
        ipv4_address: "172.22.3.2"
    ports: 
      - "6379:6379"
    volumes:
      - /root/redis/data:/data
      # 选择——是否采用配置文件启动（配置密码、）
      #- ./redis/redis.conf:/etc/redis/redis.conf
    #command: "redis-server /etc/redis/redis.conf"
    environment:
      - TZ=Asia/Shanghai
    command: "redis-server --appendonly yes --requirepass 123456"

  # 消息队列 ----------------------------------------------------------- 
  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:management
    hostname: rabbitmq
    restart: always
    networks:
      marchsoft_biz_net:
        ipv4_address: "172.22.3.3"
    ports: 
      - "5672:5672"
      - "15672:15672"
    volumes:
      - /root/rabbitmq/data:/usr/local/rabbitMq/data
      - /root/rabbitmq/log:/usr/local/rabbitMq/log
    environment:
      RABBITMQ_DEFAULT_VHOST: "/"
      RABBITMQ_DEFAULT_USER: "root"
      RABBITMQ_DEFAULT_PASS: "123456"
      
  # nginx -------------------------------------------------------------
  nginx:
    container_name: nginx
    image: nginx:1.18.0
    hostname: nginx
    restart: always
    # host 与 网桥冲突
    #networks:
      #marchsoft_biz_net:
        #ipv4_address: "172.22.2.1"
    # 配置nginx共享宿主机网络和端口
    #network_mode: "host"
    ports:
      - "8001-8100:8001-8100"
    volumes:
      # 弊端：宿主机必须要有这些文件，否则是空的
      - /root/nginx/nginx.conf:/etc/nginx/nginx.conf
      - /root/nginx/conf.d:/etc/nginx/conf.d
      - /root/nginx/logs:/var/log/nginx
      - /root/project:/project
    
  # 后端api项目容器（推荐以项目名命名） ------------------------------------
  demo-api:
    container_name: demo-api
    hostname: demo-api
    restart: always
    image: centos7_mvn_git_java8:2.0
    build: 
      context: .
      dockerfile: Dockerfile-api
    networks:
      marchsoft_biz_net:
        ipv4_address: "172.22.1.1"
    volumes:
      - /root/project:/project
    environment:
      - TZ=Asia/Shanghai
    # 配置容器的依赖、启动先后
    depends_on:
      - mysql
      - redis
      - rabbitmq
      - nginx
    # 没有进程运行，容器启动后会自动停止，使用tty阻塞容器
    tty: true
      
  # 前端npm部署容器 ----------------------------------------------------
  centos7_git_nvm:
    container_name: centos7_git_nvm
    hostname: centos7_git_nvm
    restart: always
    image: centos7_git_nvm:2.0
    build: 
      context: .
      dockerfile: Dockerfile-portal
    networks:
      marchsoft_biz_net:
        ipv4_address: "172.22.4.1"
    volumes:
      - /root/project:/project
    depends_on:
      - nginx
    tty: true
          
  # docker可视化工具portainer ------------------------------------------
  portainer:
    container_name: portainer
    hostname: portainer
    restart: always
    image: portainer/portainer
    networks:
      marchsoft_biz_net:
        ipv4_address: "172.22.4.2"
    ports:
      - "9000:9000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /root/portainer/data:/data


####################### 公共业务网桥：marchsoft_biz_net ##################
# 最好使用独立的网桥
# ip划分：
# 后端项目：172.22.1.x   
# 前端使用：172.22.2.x   
# 服务组件（redis、mysql、rabbitmq...）用：172.22.3.x 、
# 其他（portainer、nvm...）用：172.22.4.x
# 当前分配情况（ip后两位）:
# demo-api(1.1)， mysql(3.1)， redis(3.2)， rabbitmq（3.3）
# nginx(2.1)  centos7_git_nvm(4.1)   portainer(4.2) 
#######################################################################
networks:
  marchsoft_biz_net:
    external: true
